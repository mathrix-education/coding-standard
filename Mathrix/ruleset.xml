<?xml version="1.0"?>
<!-- PHP_CodeSniffer global configuration file -->
<ruleset name="Mathrix"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd">
    <description>The official Mathrix PHP_CodeSniffer coding standard.</description>

    <!--
    > Generic sniffs
    ==================================================
    -->

    <!-- Number of spaces before the keys of a multi-lines array -->
    <rule ref="Generic.Arrays.ArrayIndent">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Prevent single lines control structures -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- UNIX '\n' line endings -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!--
    The soft limit on line length MUST be 120 characters, no hard limit.
    See https://www.php-fig.org/psr/psr-12/#23-lines
    -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
            <property name="ignoreComments" value="false"/>
        </properties>
    </rule>

    <!-- Align equals signs if the spaces necessary to align them is less than the given padding -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="20"/>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- NO space after cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" value="false"/>
        </properties>
    </rule>

    <!-- NO space after a not '!' in boolean expressions -->
    <rule ref="Generic.Formatting.SpaceAfterNot">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" value="false"/>
        </properties>
    </rule>

    <!--
    Opening brace placed on the next line for functions and method:
    ```php
    function foo()
    { // <- brace on the next line
    }
    ```
    -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman">
        <properties>
            <property name="checkFunctions" value="true"/>
            <property name="checkClosures" value="false"/>
        </properties>
    </rule>

    <!--
    Opening brace placed on the same lines for closures:
    ```php
    $a = function foo() { // <- brace on same next line
    }
    ```
    -->
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie">
        <properties>
            <property name="checkFunctions" value="false"/>
            <property name="checkClosures" value="true"/>
        </properties>
    </rule>

    <!-- Cyclomatic complexity -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="10"/>
            <property name="absoluteComplexity" value="20"/>
        </properties>
    </rule>

    <!-- Nesting level -->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="5"/>
            <property name="absoluteNestingLevel" value="10"/>
        </properties>
    </rule>

    <!-- Functions names in camelCase but allow consecutive capital letters (such as 'defAPI') -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <property name="strict" value="false"/>
        </properties>
    </rule>

    <!-- Forbidden functions, extracted from Doctrine coding standard -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="compact" value="null"/>
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="extract" value="null"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_set"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="settype" value="null"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid @silenced() calls -->
    <rule ref="Generic.PHP.NoSilencedErrors">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- Check if strings can be concatenated, but allow multilines ones -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!--
    Do not allow this kind of spacing:
    ```php
    $foo = ( $bar !== 'bar' );
    ```
    -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!--
    Indentation rules, see
    https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties#genericwhitespacescopeindent
    -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="indent" value="4"/>
            <property name="exact" value="true"/>
            <property name="tabIndent" value="false"/>
            <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
        </properties>
    </rule>

    <!-- Spread operator (...) -->
    <rule ref="Generic.WhiteSpace.SpreadOperatorSpacingAfter">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" value="false"/>
        </properties>
    </rule>

    <!--
    > PEAR sniffs
    ==================================================
    -->
    <!-- Indentation of multiline conditions -->
    <rule ref="PEAR.ControlStructures.MultiLineCondition">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Multiline assignment -->
    <rule ref="PEAR.Formatting.MultiLineAssignment">
        <properties>
            <property name="indent" value="2"/>
        </properties>
    </rule>

    <!-- Multiline function declaration -->
    <rule ref="PEAR.Functions.FunctionDeclaration">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Method chaining -->
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
        <properties>
            <property name="indent" value="4"/>
            <property name="multilevel" value="false"/>
        </properties>
    </rule>

    <!-- Indentation after case or default in switch -->
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!--
    > PSR-2 sniffs
    ==================================================
    -->
    <!-- Class block indentation -->
    <rule ref="PSR2.Classes.ClassDeclaration">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Control structure spacing -->
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
        </properties>
    </rule>

    <!-- Switch declaration -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration">
        <properties>
            <property name="indent" value="2"/>
        </properties>
    </rule>

    <!--
    Function call signatures (overrides PEAR.Functions.FunctionCallSignature), see
    https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties#psr2methodsfunctioncallsignature
    -->
    <rule ref="PSR2.Methods.FunctionCallSignature">
        <properties>
            <property name="indent" value="4"/>
            <property name="allowMultipleArguments" value="false"/>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
        </properties>
    </rule>

    <!--
    > PSR-12 sniffs
    ==================================================
    -->
    <rule ref="PSR12.Classes.AnonClassDeclaration">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!--
    Boolean operators placement.
    ```php
    // Not allowed
    $a = first()
        && second()
        && third()

    // Much preferred
    $a = first() &&
        second() &&
        third()
    ```
    -->
    <rule ref="PSR12.ControlStructures.BooleanOperatorPlacement">
        <properties>
            <property name="allowOnly" value="first"/>
        </properties>
    </rule>

    <!-- Control structure indentation -->
    <rule ref="PSR12.ControlStructures.ControlStructureSpacing">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!--
    See:
    https://www.php-fig.org/psr/psr-12/#3-declare-statements-namespace-and-import-statements
    https://github.com/squizlabs/PHP_CodeSniffer/blob/master/src/Standards/Generic/Tests/Functions/OpeningFunctionBraceBsdAllmanUnitTest.inc.fixed
    -->
    <rule ref="PSR12.Namespaces.CompoundNamespaceDepth">
        <properties>
            <property name="maxDepth" value="2"/>
        </properties>
    </rule>

    <!-- Operator spacing -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="false"/>
            <property name="ignoreSpacingBeforeAssignments" value="true"/>
        </properties>
    </rule>

    <!--
    > Squiz sniffs
    ==================================================
    -->
    <!-- Old school if/else/endif, NO space before colon -->
    <rule ref="Squiz.ControlStructures.ControlSignature">
        <properties>
            <property name="requiredSpacesBeforeColon" value="0"/>
        </properties>
    </rule>

    <!-- NO inner space within foreach loops declarations -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration">
        <properties>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
        </properties>
    </rule>

    <!-- NO inner space within for loops declarations -->
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
            <property name="ignoreNewlines" value="false"/>
        </properties>
    </rule>

    <!-- switch case/default indentation -->
    <rule ref="Squiz.ControlStructures.SwitchDeclaration">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- NO comments inside the functions declarations -->
    <rule ref="Squiz.Functions.FunctionDeclaration">
        <properties>
            <property name="ignoreComments" value="false"/>
        </properties>
    </rule>

    <!--
    Optional arguments:
    ```php
    // We like that
    function foo($a = 'a', $b = 'b') {
        // Body.
    }

    // Not that
    function foo($a='a', $b='b') {
        // Body.
    }
    ```
    -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
        </properties>
    </rule>

    <!-- Concatenation operator spacing -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Ensure 1 blank line before and after functions, except at the top and bottom. -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="0"/>
            <property name="spacingAfterLast" value="0"/>
        </properties>
    </rule>

    <!-- NO lines between properties. -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacing" value="0"/>
            <property name="spacingBeforeFirst" value="0"/>
        </properties>
    </rule>

    <!-- Object operators spacing -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Operators spacing -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- NO superfluous whitespace (end of lines, empty lines -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>

    <!--
    > Slevomat sniffs
    ==================================================
    -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="enableObjectTypeHint" value="true"/>
            <property name="traversableTypeHints" type="array">
                <element value="\Braintree\Collection"/>
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
                <element value="\Stripe\Collection"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="enableNativeTypeHint" value="true"/>
            <property name="traversableTypeHints" type="array">
                <element value="\Braintree\Collection"/>
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
                <element value="\Stripe\Collection"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="enableNativeTypeHint" value="true"/>
            <property name="traversableTypeHints" type="array">
                <element value="\Braintree\Collection"/>
                <element value="\Illuminate\Database\Eloquent\Collection"/>
                <element value="\Illuminate\Support\Collection"/>
                <element value="\Stripe\Collection"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <!--
    <?php
    declare(strict_types=1);
    -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="newlinesCountAfterDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <!--
    Forbid implicit array creation like:
    ```php
    $a[] = 1; // $a is invalid (implicit creation)
    $b = [];
    $b[] = 1: // $b is valid (explicit creation)
    ```
    -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <!-- Traits -->
                <element value="uses"/>
                <element value="public constants"/>
                <element value="protected constants"/>
                <element value="private constants"/>
                <element value="public properties, protected properties, private properties"/>
                <element value="public static properties, protected static properties, private static properties"/>
                <element value="constructor"/>
                <element value="public static abstract methods,
                                protected static abstract methods,
                                public static methods,
                                protected static methods,
                                private static methods"/>
                <element value="public abstract methods,
                                protected abstract methods,
                                public methods,
                                protected methods,
                                private methods"/>
                <element value="magic methods"/>
                <element value="static constructors"/>
                <element value="destructor"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreStandaloneIfInScope" value="true"/>
            <property name="ignoreOneLineTrailingIf" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
    <!--    <rule ref="SlevomatCodingStandard.PHP.DisallowDirectMagicInvokeCall"/>-->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
    <rule ref="SlevomatCodingStandard.PHP.RequireNowdoc"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses">
        <properties>
            <property name="ignoreComplexTernaryConditions" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <!--    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable"/>-->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement"/>
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace">
        <properties>
            <property name="spacesAroundBrackets" value="0"/>
            <property name="enableEmptyArrayCheck" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma">
        <properties>
            <property name="enableAfterHeredoc" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="0"/>
            <property name="maxLinesCountBeforeWithComment" value="0"/>
            <property name="minLinesCountBeforeWithoutComment" value="0"/>
            <property name="maxLinesCountBeforeWithoutComment" value="0"/>
        </properties>
    </rule>
    <!--    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition"/>-->
    <!--    <rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition"/>-->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="0"/>
            <property name="maxLinesCountBeforeWithComment" value="0"/>
            <property name="minLinesCountBeforeWithoutComment" value="0"/>
            <property name="maxLinesCountBeforeWithoutComment" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousTraitNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBeforeFirstUseWhenFirstInClass" value="0"/>
            <property name="linesCountBetweenUses" value="0"/>
            <property name="linesCountAfterLastUse" value="1"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <properties>
            <property name="linesCountBeforeControlStructure" value="1"/>
            <property name="linesCountBeforeFirstControlStructure" value="1"/>
            <property name="linesCountAfterControlStructure" value="1"/>
            <property name="linesCountAfterLastControlStructure" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="allowSingleLineYieldStacking" value="true"/>
            <property name="linesCountBeforeControlStructure" value="1"/>
            <property name="linesCountBeforeFirstControlStructure" value="1"/>
            <property name="linesCountAfterControlStructure" value="1"/>
            <property name="linesCountAfterLastControlStructure" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.Files.LineLength">
        <properties>
            <property name="lineLengthLimit" value="120"/>
            <property name="ignoreComments" value="false"/>
            <property name="ignoreImports" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction"/>
    <rule ref="SlevomatCodingStandard.Functions.TrailingCommaInCall"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
        <properties>
            <property name="psr12Compatible" value="true"/>
            <property name="caseSensitive" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="1"/>
            <property name="linesCountAfterNamespace" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="0"/>
            <property name="linesCountAfterLastUse" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator"/>
    <rule ref="SlevomatCodingStandard.PHP.ReferenceSpacing">
        <properties>
            <property name="spacesCountAfterReference" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing">
        <properties>
            <property name="spacesCount" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing">
        <properties>
            <property name="spacesCountAfterOperator" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>

    <!-- From Doctrine Coding Standard -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@api"/>
                <element value="@author"/>
                <element value="@category"/>
                <element value="@copyright"/>
                <element value="@created"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@since"/>
                <element value="@subpackage"/>
                <element value="@version"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by .+\.\z~i"/>
                <element value="~^(User|Date|Time): \S+\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
                <element value="~^(Class|Interface|Trait) \S+\z~i"/>
            </property>
        </properties>
    </rule>

    <!-- Require specific order of phpDoc annotations with empty newline between specific groups -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0"/>
            <property name="linesCountAfterLastContent" value="0"/>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
            <property name="linesCountBetweenAnnotationsGroups" value="1"/>
            <property name="annotationsGroups" type="array">
                <element value="
                    @internal,
                    @deprecated,
                "/>
                <!-- PHPUnit integration -->
                <element value="
                    @dataProvider,
                    @testdox,
                    @coversDefaultClass,
                    @covers,
                    @uses,
                "/>
                <element value="
                    @link,
                    @see,
                "/>
                <element value="@param"/>
                <element value="@return"/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLineDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>
</ruleset>
